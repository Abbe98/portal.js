name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**.md'
  push:
    paths-ignore:
      - '**.md'

env:
  CF_API: https://api.eu-de.bluemix.net
  CF_DOMAIN: eu-de.mybluemix.net
  CF_ORG: europeana-dev
  CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
  CF_SPACE: dev
  CF_USERNAME: apikey
  CTF_CDA_ACCESS_TOKEN: ${{ secrets.CTF_CDA_ACCESS_TOKEN }}
  CTF_ENVIRONMENT_ID: test
  CTF_SPACE_ID: ${{ secrets.CTF_SPACE_ID }}
  DISQUS_SHORTNAME:  ${{ secrets.DISQUS_SHORTNAME }}
  EUROPEANA_ANNOTATION_API_KEY: ${{ secrets.EUROPEANA_ANNOTATION_API_KEY }}
  EUROPEANA_ENTITY_API_KEY: ${{ secrets.EUROPEANA_ENTITY_API_KEY }}
  EUROPEANA_RECORD_API_KEY: ${{ secrets.EUROPEANA_RECORD_API_KEY }}
  GECKODRIVER_SKIP_DOWNLOAD: true
  PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  info:
    runs-on: ubuntu-latest
    steps:
    - run: echo ${GITHUB_RUN_ID}
    - run: echo ${GITHUB_ACTOR}
    - run: echo ${GITHUB_REPOSITORY}
    - run: echo ${GITHUB_REF}
    - run: echo ${GITHUB_HEAD_REF}
    - run: echo ${GITHUB_BASE_REF}
    - run: echo ${GITHUB_SHA}
    - run: cat ${GITHUB_EVENT_PATH}

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - uses: actions/cache@v2
      id: cache-node
      with:
        path: |
          ~/.npm
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    - if: steps.cache-node.outputs.cache-hit != 'true'
      run: npm install
    - run: envsubst < .env.ci > .env
    - run: npm run build
    - uses: actions/upload-artifact@v2
      with:
        name: build
        path: |
          .nuxt/
          .env

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - uses: actions/cache@v2
      with:
        path: |
          ~/.npm
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    - uses: actions/download-artifact@v2
      with:
        path: ./tmp
    - name: Restoring build artifacts
      run: cp -r ./tmp/build/. .
    - run: npm run lint
    - run: npm run stylelint
    - run: npm run test:unit
    - run: npx size-limit

  e2e:
    needs: build
    if: github.event_name	== 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - uses: actions/cache@v2
      with:
        path: |
          ~/.npm
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    - uses: actions/download-artifact@v2
      with:
        path: ./tmp
    - name: Restoring build artifacts
      run: cp -r ./tmp/build/. .
    - run: npm run test:ci:e2e

  percy:
    needs: build
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - uses: actions/cache@v2
      with:
        path: |
          ~/.npm
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    - run: env
    - run: npm install
    - uses: actions/download-artifact@v2
      with:
        path: ./tmp
    - name: Restoring build artifacts
      run: cp -r ./tmp/build/. .
    - run: npm run test:ci:percy

  # TODO: limit to internal PRs, i.e. those from within the repo
  deploy:
    needs: test
    if: github.event_name	== 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        path: ./tmp
    - name: Restoring build artifacts
      run: cp -r ./tmp/build/. .
    - run: echo "::set-env name=PULL_REQUEST_NUMBER::$(jq .pull_request.number ${GITHUB_EVENT_PATH})"
    - run: echo "::set-env name=CF_APP_NAME::portaljs-${PULL_REQUEST_NUMBER}"
    # TODO: build and push a Docker image for this to speed it up?
    - name: Install CF CLI & plugins
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get -q update && sudo apt-get -yq install cf-cli
        cf install-plugin blue-green-deploy -f -r CF-Community
        cf install-plugin app-autoscaler-plugin -f -r CF-Community
    - name: Login to CF
      run: cf login -a ${CF_API} -u ${CF_USERNAME} -p "${CF_PASSWORD}" -o ${CF_ORG} -s ${CF_SPACE}
    - name: Blue-green deployment to CF
      run: cf blue-green-deploy ${CF_APP_NAME} -f deploy/cloud-foundry/manifest.yml --delete-old-apps
    - name: Notify Slack
      # TODO: include Github username in message? PR title?
      # TODO: limit to newly opened PRs? to prevent flooding the channel
      run: |
        envsubst < .github/workflows/support/ci.deploy.slack-notification.json > tmp/ci.deploy.slack-notification.json
        curl -d "@tmp/ci.deploy.slack-notification.json" -X POST ${SLACK_WEBHOOK_URL}
