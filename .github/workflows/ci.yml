name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**.md'
  push:
    paths-ignore:
      - '**.md'

env:
  CF_API: https://api.eu-de.cf.cloud.ibm.com
  CF_APP_NAME_PREFIX: portaljs
  CF_DOMAIN: eu-de.mybluemix.net
  CF_ORG: europeana-dev
  CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
  CF_USERNAME: apikey
  CTF_CDA_ACCESS_TOKEN: ${{ secrets.CTF_CDA_ACCESS_TOKEN }}
  CTF_ENVIRONMENT_ID: test
  CTF_GRAPHQL_ORIGIN: https://portaljs-api-proxy-cache-test.eanadev.org
  CTF_SPACE_ID: ${{ secrets.CTF_SPACE_ID }}
  DISQUS_SHORTNAME:  ${{ secrets.DISQUS_SHORTNAME }}
  EUROPEANA_ANNOTATION_API_KEY: ${{ secrets.EUROPEANA_ANNOTATION_API_KEY }}
  EUROPEANA_ENTITY_API_KEY: ${{ secrets.EUROPEANA_ENTITY_API_KEY }}
  EUROPEANA_RECORD_API_KEY: ${{ secrets.EUROPEANA_RECORD_API_KEY }}
  PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  info:
    runs-on: ubuntu-latest
    steps:
    - run: echo ${GITHUB_RUN_ID}
    - run: echo ${GITHUB_ACTOR}
    - run: echo ${GITHUB_REPOSITORY}
    - run: echo ${GITHUB_REF}
    - run: echo ${GITHUB_HEAD_REF}
    - run: echo ${GITHUB_BASE_REF}
    - run: echo ${GITHUB_SHA}
    - run: cat ${GITHUB_EVENT_PATH}

  env:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: echo "::set-env name=PULL_REQUEST_NUMBER::$(jq .pull_request.number ${GITHUB_EVENT_PATH})"
    - run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then CF_SPACE=dev; CF_APP_NAME_SUFFIX="-${PULL_REQUEST_NUMBER}"; fi
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/master" ]; then CF_SPACE=test; CF_APP_NAME_SUFFIX="-test"; fi
        echo "::set-env name=CF_SPACE::${CF_SPACE}"
        echo "::set-env name=CF_APP_NAME::${CF_APP_NAME_PREFIX}${CF_APP_NAME_SUFFIX}"
    - run: echo "::set-env name=CF_APP_FQDN::${CF_APP_NAME}.${CF_DOMAIN}"
    - run: envsubst < .github/workflows/support/.env.ci > .env
    - uses: actions/upload-artifact@v2
      with:
        name: .env
        path: .env
    - id: done
      run: |
        echo "::set-output name=pull-request-number::${PULL_REQUEST_NUMBER}"
        echo "::set-output name=cf-space::${CF_SPACE}"
        echo "::set-output name=cf-app-name::${CF_APP_NAME}"
        echo "::set-output name=cf-app-fqdn::${CF_APP_FQDN}"
    outputs:
      pull-request-number: ${{ steps.done.outputs.pull-request-number }}
      cf-app-name: ${{ steps.done.outputs.cf-app-name }}
      cf-app-fqdn: ${{ steps.done.outputs.cf-app-fqdn }}
      cf-space:  ${{ steps.done.outputs.cf-space }}

  build:
    needs: env
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - uses: actions/download-artifact@v2
      with:
        path: tmp
    - name: Restore build artifacts
      run: mv tmp/.env/.env .
    - uses: actions/cache@v2
      id: cache-node
      with:
        path: |
          ~/.npm
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    - if: steps.cache-node.outputs.cache-hit != 'true'
      run: npm install
    - run: npm run build
    - uses: actions/upload-artifact@v2
      with:
        name: .nuxt
        path: .nuxt/

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - uses: actions/cache@v2
      id: cache-node
      with:
        path: |
          ~/.npm
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    - if: steps.cache-node.outputs.cache-hit != 'true'
      run: npm install
    - uses: actions/download-artifact@v2
      with:
        path: tmp
    - name: Restore build artifacts
      run: |
        mv tmp/.env/.env .
        mv tmp/.nuxt .
    - run: npm run lint
    - run: npm run stylelint
    - run: npm run test:unit
    - run: npx size-limit

  # TODO: limit to internal PRs, i.e. those from within the repo
  deploy:
    needs: [env, build]
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    env:
      PULL_REQUEST_NUMBER: ${{ needs.env.outputs.pull-request-number }}
      CF_APP_NAME: ${{ needs.env.outputs.cf-app-name }}
      CF_SPACE: ${{ needs.env.outputs.cf-space }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        path: tmp
    - name: Restore build artifacts
      run: |
        mv tmp/.env/.env .
        mv tmp/.nuxt .
    # TODO: build and push a Docker image for this to speed it up?
    - name: Install CF CLI & plugins
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get -q update && sudo apt-get -yq install cf-cli
        cf install-plugin blue-green-deploy -f -r CF-Community
        cf install-plugin app-autoscaler-plugin -f -r CF-Community
    - name: Login to CF
      run: cf login -a ${CF_API} -u ${CF_USERNAME} -p "${CF_PASSWORD}" -o ${CF_ORG} -s ${CF_SPACE}
    - name: Detect first deployment of this app
      id: detect
      run: |
        cf app ${CF_APP_NAME}
        if [ $? -eq 1 ]; then CF_APP_FIRST_DEPLOY="true"; else CF_APP_FIRST_DEPLOY="false"; fi
        echo "::set-output name=cf-app-first-deploy::${CF_APP_FIRST_DEPLOY}"
    - name: Blue-green deployment to CF
      run: cf blue-green-deploy ${CF_APP_NAME} -f .github/workflows/support/ci.cf.dev.manifest.yml --delete-old-apps
    outputs:
      cf-app-first-deploy: ${{ steps.detect.outputs.cf-app-first-deploy }}

  notify:
    needs: [deploy, env]
    if: github.event_name	== 'pull_request' && needs.deploy.outputs.cf-app-first-deploy == 'true'
    runs-on: ubuntu-latest
    env:
      PULL_REQUEST_NUMBER: ${{ needs.env.outputs.pull-request-number }}
      CF_APP_FQDN: ${{ needs.env.outputs.cf-app-fqdn }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: env
          path: tmp
      - name: Restore build artifacts
        run: mv tmp/.env/.env .
      - name: Notify Slack
        # TODO: include Github username in message? PR title?
        run: |
          envsubst < .github/workflows/support/ci.deploy.slack-notification.json > tmp/ci.deploy.slack-notification.json
          curl -d "@tmp/ci.deploy.slack-notification.json" -X POST ${SLACK_WEBHOOK_URL}

  e2e:
    needs: [env, build]
    if: github.event_name	== 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - uses: actions/cache@v2
      id: cache-node
      with:
        path: |
          ~/.npm
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    - if: steps.cache-node.outputs.cache-hit != 'true'
      run: npm install
    - uses: actions/download-artifact@v2
      with:
        path: tmp
    - name: Restore build artifacts
      run: |
        mv tmp/.env/.env .
        mv tmp/.nuxt .
    - run: npm run test:e2e:ci

  percy:
    needs: [env, build]
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - uses: actions/cache@v2
      id: cache-node
      with:
        path: |
          ~/.npm
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    - if: steps.cache-node.outputs.cache-hit != 'true'
      run: npm install
    - uses: actions/download-artifact@v2
      with:
        path: tmp
    - name: Restore build artifacts
      run: |
        mv tmp/.env/.env .
        mv tmp/.nuxt .
    - run: npm run test:e2e:ci:percy
